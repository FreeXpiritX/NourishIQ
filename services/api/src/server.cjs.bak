require('dotenv').config();

const express = require('express');
const cors = require('cors');
const bodyParser = require('body-parser');
const Stripe = require('stripe');

const app = express();

// --- CORS
app.use(cors({
  origin: process.env.CORS_ORIGIN || 'http://localhost:3000',
  credentials: true
}));

// --- Stripe init
const STRIPE_KEY = process.env.STRIPE_SECRET_KEY || '';
const stripe = (STRIPE_KEY && STRIPE_KEY.startsWith('sk_test_')) ? new Stripe(STRIPE_KEY) : null;

// --- Debug memory
const recent = { lastEmail: null, lastEventTypes: [] };

// --- Webhook (raw body BEFORE express.json)
app.post('/api/v1/stripe/webhook', bodyParser.raw({ type: 'application/json' }), (req, res) => {
  console.log('[Webhook] incoming', new Date().toISOString(), 'bytes=', req.headers['content-length'] || '0');

  if (!stripe) {
    console.error('[Webhook] Stripe not configured (missing/invalid sk_test key)');
    return res.status(500).json({ ok: false });
  }

  const sig = req.headers['stripe-signature'];
  const secret = process.env.STRIPE_WEBHOOK_SECRET;

  try {
    const event = stripe.webhooks.constructEvent(req.body, sig, secret);

    // Track events
    recent.lastEventTypes.push(event.type);
    if (recent.lastEventTypes.length > 40) recent.lastEventTypes.shift();

    if (event.type === 'checkout.session.completed') {
      const s = event.data.object;
      recent.lastEmail = s && s.customer_details ? s.customer_details.email : null;
      console.log('[Stripe] checkout.session.completed for:', recent.lastEmail);
    }

    res.json({ received: true });
  } catch (err) {
    console.error('[Webhook] signature verification failed:', err.message);
    res.status(400).send(`Webhook Error: ${err.message}`);
  }
});

// --- JSON middleware AFTER webhook
app.use(express.json());

// --- Checkout session
app.post('/api/v1/checkout/session', async (req, res) => {
  try {
    if (!stripe) return res.status(500).json({ ok: false, message: 'Stripe not configured' });

    const priceId = (req.body && req.body.priceId) || process.env.PRICE_ID;
    const email = (req.body && req.body.email) || 'test@example.com';

    if (!priceId) return res.status(400).json({ ok: false, message: 'Missing priceId' });

    const session = await stripe.checkout.sessions.create({
      mode: 'subscription',
      customer_email: email,
      line_items: [{ price: priceId, quantity: 1 }],
      success_url: `${process.env.APP_WEB_URL}/onboarding/success?session_id={CHECKOUT_SESSION_ID}`,
      cancel_url: `${process.env.APP_WEB_URL}/onboarding/cancel`,
      automatic_tax: { enabled: true }
    });

    res.json({ ok: true, data: { url: session.url } });
  } catch (e) {
    console.error('[checkout/session] error:', e.message || e);
    res.status(400).json({ ok: false, message: 'Could not create session' });
  }
});

// --- Create a Billing Portal session from an email
app.post('/api/v1/billing/portal', async (req, res) => {
  try {
    if (!stripe) return res.status(500).json({ ok: false, message: 'Stripe not configured' });

    const email = (req.body && req.body.email) || '';
    const returnUrl = (req.body && req.body.returnUrl) || (process.env.APP_WEB_URL || 'http://localhost:3000') + '/account';
    if (!email) return res.status(400).json({ ok: false, message: 'Missing email' });

    const { data } = await stripe.customers.list({ email, limit: 1 });
    if (!data || data.length === 0) return res.status(404).json({ ok: false, message: 'Customer not found' });

    const customerId = data[0].id;

    const portal = await stripe.billingPortal.sessions.create({
      customer: customerId,
      return_url: returnUrl,
    });

    return res.json({ ok: true, url: portal.url });
  } catch (e) {
    console.error('[billing/portal] error:', e.message || e);
    return res.status(400).json({ ok: false, message: 'Could not create portal session' });
  }
});

// --- Debug route
app.get('/api/v1/debug/stripe', (_req, res) => {
  res.json({ ok: true, lastEmail: recent.lastEmail, lastEventTypes: recent.lastEventTypes });
});

// --- Health
app.get('/api/health', (_req, res) => res.json({ ok: true }));

// --- Start
const PORT = Number(process.env.PORT || 8083);
const HOST = process.env.HOST || '127.0.0.1';
console.log('[BOOT v4] server starting…');
app.listen(PORT, HOST, () => console.log('[API] listening on', PORT, 'host', HOST));
CJScd /Users/francisco/nourishiq/APPBUILDING/services/api
cat > src/server.cjs <<'CJS'
require('dotenv').config();

const express = require('express');
const cors = require('cors');
const bodyParser = require('body-parser');
const Stripe = require('stripe');

const app = express();

// Basic request log (helps us see traffic)
app.use((req, _res, next) => {
  console.log('[REQ]', req.method, req.url, 'len=', req.headers['content-length'] || 0);
  next();
});

// CORS
app.use(cors({
  origin: process.env.CORS_ORIGIN || 'http://localhost:3000',
  credentials: true
}));

// Stripe init
const STRIPE_KEY = process.env.STRIPE_SECRET_KEY || '';
const stripe = (STRIPE_KEY && STRIPE_KEY.startsWith('sk_')) ? new Stripe(STRIPE_KEY) : null;

// In-memory debug info
const recent = { lastEmail: null, lastEventTypes: [] };

// ---- Webhook (raw body BEFORE express.json)
app.post('/api/v1/stripe/webhook', bodyParser.raw({ type: 'application/json' }), (req, res) => {
  console.log('[Webhook] incoming', new Date().toISOString(), 'bytes=', req.headers['content-length'] || '0');

  if (!stripe) {
    console.error('[Webhook] Stripe not configured (missing/invalid sk_ key)');
    return res.status(500).json({ ok: false });
  }

  const sig = req.headers['stripe-signature'];
  const secret = process.env.STRIPE_WEBHOOK_SECRET;

  try {
    const event = stripe.webhooks.constructEvent(req.body, sig, secret);

    // record recent events
    recent.lastEventTypes.push(event.type);
    if (recent.lastEventTypes.length > 30) recent.lastEventTypes.shift();
    if (event.type === 'checkout.session.completed') {
      const s = event.data.object;
      recent.lastEmail = s && s.customer_details ? s.customer_details.email : null;
      console.log('[Stripe] checkout.session.completed for:', recent.lastEmail);
    }

    return res.json({ received: true });
  } catch (err) {
    console.error('[Webhook] signature verification failed:', err.message);
    return res.status(400).send(`Webhook Error: ${err.message}`);
  }
});

// ---- JSON middleware AFTER webhook
app.use(express.json());

// ---- Create Checkout Session (subscription)
app.post('/api/v1/checkout/session', async (req, res) => {
  try {
    if (!stripe) return res.status(500).json({ ok: false, message: 'Stripe not configured' });

    const priceId = (req.body && req.body.priceId) || process.env.PRICE_ID;
    const email = (req.body && req.body.email) || 'test@example.com';
    if (!priceId) return res.status(400).json({ ok: false, message: 'Missing priceId' });

    const session = await stripe.checkout.sessions.create({
      mode: 'subscription',
      customer_email: email,
      line_items: [{ price: priceId, quantity: 1 }],
      success_url: `${process.env.APP_WEB_URL || 'http://localhost:3000'}/onboarding/success?session_id={CHECKOUT_SESSION_ID}`,
      cancel_url: `${process.env.APP_WEB_URL || 'http://localhost:3000'}/onboarding/cancel`,
      automatic_tax: { enabled: true }
    });

    return res.json({ ok: true, data: { url: session.url } });
  } catch (e) {
    console.error('[checkout/session] error:', e && e.message ? e.message : e);
    return res.status(400).json({ ok: false, message: 'Could not create session' });
  }
});

// ---- Create Billing Portal session from email
app.post('/api/v1/billing/portal', async (req, res) => {
  try {
    if (!stripe) return res.status(500).json({ ok: false, message: 'Stripe not configured' });

    const email = (req.body && req.body.email) || '';
    const returnUrl = (req.body && req.body.returnUrl) || (process.env.APP_WEB_URL || 'http://localhost:3000') + '/account';
    if (!email) return res.status(400).json({ ok: false, message: 'Missing email' });

    const { data } = await stripe.customers.list({ email, limit: 1 });
    if (!data || data.length === 0) return res.status(404).json({ ok: false, message: 'Customer not found' });

    const customerId = data[0].id;

    const portal = await stripe.billingPortal.sessions.create({
      customer: customerId,
      return_url: returnUrl,
    });

    return res.json({ ok: true, url: portal.url });
  } catch (e) {
    console.error('[billing/portal] error:', e && e.message ? e.message : e);
    return res.status(400).json({ ok: false, message: 'Could not create portal session' });
  }
});

// ---- Debug + Health
app.get('/api/v1/debug/stripe', (_req, res) => {
  res.json({ ok: true, lastEmail: recent.lastEmail, lastEventTypes: recent.lastEventTypes });
});

app.get('/api/health', (_req, res) => res.json({ ok: true }));

// ---- Start server
const PORT = Number(process.env.PORT || 8083);
const HOST = process.env.HOST || '127.0.0.1';
console.log('[BOOT] server starting…');
app.listen(PORT, HOST, () => console.log('[API] listening on', PORT, 'host', HOST));

// ~/NOURISHIQ/APPBUILDING/services/api/src/server.js
import 'dotenv/config';
import express from 'express';
import bodyParser from 'body-parser';
import morgan from 'morgan';
import cors from 'cors';
import { PrismaClient } from '@prisma/client';

// Stripe is optional for local dev tests (we still import it for real verification)
import Stripe from 'stripe';
const stripe = process.env.STRIPE_SECRET ? new Stripe(process.env.STRIPE_SECRET) : null;

const prisma = new PrismaClient();
const app = express();

/**
 * ──────────────────────────────────────────────────────────────────────────────
 * Logging, CORS
 * ──────────────────────────────────────────────────────────────────────────────
 */
app.use(morgan('dev'));
app.use(cors({ origin: '*', credentials: false }));

/**
 * ──────────────────────────────────────────────────────────────────────────────
 * Stripe Webhook — RAW BODY FIRST!
 * - In PRODUCTION: we verify signature with Stripe.
 * - In DEV: if there is NO signature header, we bypass verification so you can curl.
 * ──────────────────────────────────────────────────────────────────────────────
 */
app.post(
  '/api/v1/stripe/webhook',
  bodyParser.raw({ type: 'application/json' }),
  async (req, res) => {
    try {
      const buf = Buffer.isBuffer(req.body) ? req.body : Buffer.from(JSON.stringify(req.body || {}));
      const sig = req.headers['stripe-signature'];

      let event;

      if (stripe && process.env.STRIPE_WEBHOOK_SECRET && sig) {
        // Real verification path (Stripe sends the signature header)
        try {
          event = stripe.webhooks.constructEvent(buf, sig, process.env.STRIPE_WEBHOOK_SECRET);
        } catch (err) {
          console.error('[Webhook] signature verification failed:', err.message);
          return res.status(400).json({ error: err.message });
        }
      } else {
        // DEV-ONLY BYPASS: no signature header present (manual curl)
        console.warn('[Webhook] No signature header, bypassing verification (DEV ONLY).');
        event = JSON.parse(buf.toString('utf8') || '{}');
      }

      const eventId = event.id || `evt_${Date.now()}`;
      const type = event.type || 'unknown';

      // Idempotent save: skip if already stored
      const exists = await prisma.webhookEvent.findUnique({ where: { eventId } });
      if (exists) {
        return res.status(200).json({ ok: true, dedup: true, eventId });
      }

      await prisma.webhookEvent.create({
        data: {
          eventId,
          type,
          payload: JSON.stringify(event),
          processed: false,
          notes: 'saved (unprocessed)',
        },
      });

      return res.json({ ok: true, saved: true, eventId, type });
    } catch (err) {
      console.error('[Webhook] save failed:', err);
      return res.status(500).json({ ok: false, error: 'Internal server error' });
    }
  }
);

// After webhook route, enable JSON body parsing for the rest
app.use(express.json());

/**
 * ──────────────────────────────────────────────────────────────────────────────
 * Health & Version
 * ──────────────────────────────────────────────────────────────────────────────
 */
app.get('/api/health', (_req, res) => res.json({ ok: true }));
app.get('/api/version', (_req, res) =>
  res.json({ version: 'v1.0.0', timestamp: new Date().toISOString() })
);

/**
 * ──────────────────────────────────────────────────────────────────────────────
 * Users CRUD (SQLite via Prisma)
 * ──────────────────────────────────────────────────────────────────────────────
 */
app.get('/api/users', async (_req, res) => {
  const users = await prisma.user.findMany({ orderBy: { id: 'desc' } });
  res.json(users);
});

app.get('/api/users/:id', async (req, res) => {
  const id = Number(req.params.id);
  if (!Number.isInteger(id)) return res.status(400).json({ ok: false, error: 'Invalid id' });
  const user = await prisma.user.findUnique({ where: { id } });
  if (!user) return res.status(404).json({ ok: false, error: 'Not found' });
  res.json(user);
});

app.post('/api/users', async (req, res) => {
  try {
    const name = (req.body?.name || `Demo ${Date.now()}`).toString();
    const email = (req.body?.email || `demo+${Date.now()}@example.com`).toString();

    const user = await prisma.user.create({ data: { name, email } });
    res.status(201).json(user);
  } catch (err) {
    if (err?.code === 'P2002') {
      return res.status(409).json({ ok: false, error: 'Email already in use' });
    }
    console.error('Error creating user:', err);
    res.status(500).json({ ok: false, error: 'Internal server error' });
  }
});

app.put('/api/users/:id', async (req, res) => {
  const id = Number(req.params.id);
  if (!Number.isInteger(id)) return res.status(400).json({ ok: false, error: 'Invalid id' });

  const data = {};
  if (typeof req.body?.name === 'string' && req.body.name.trim()) data.name = req.body.name.trim();
  if (typeof req.body?.email === 'string' && req.body.email.trim()) data.email = req.body.email.trim();
  if (Object.keys(data).length === 0) return res.status(400).json({ ok: false, error: 'No fields to update' });

  try {
    const updated = await prisma.user.update({ where: { id }, data });
    res.json(updated);
  } catch (err) {
    if (err?.code === 'P2002') {
      return res.status(409).json({ ok: false, error: 'Email already in use' });
    }
    if (err?.code === 'P2025') {
      return res.status(404).json({ ok: false, error: 'Not found' });
    }
    console.error('Update error:', err);
    res.status(500).json({ ok: false, error: 'Internal server error' });
  }
});

app.delete('/api/users/:id', async (req, res) => {
  const id = Number(req.params.id);
  if (!Number.isInteger(id)) return res.status(400).json({ ok: false, error: 'Invalid id' });
  try {
    await prisma.user.delete({ where: { id } });
    res.json({ ok: true, deletedId: id });
  } catch (err) {
    if (err?.code === 'P2025') {
      return res.status(404).json({ ok: false, error: 'Not found' });
    }
    console.error('Delete error:', err);
    res.status(500).json({ ok: false, error: 'Internal server error' });
  }
});

// Dev helper: reset all users
app.delete('/api/users', async (_req, res) => {
  await prisma.user.deleteMany();
  res.json({ ok: true });
});

/**
 * ──────────────────────────────────────────────────────────────────────────────
 * Webhook debugging helpers (read-only)
 * ──────────────────────────────────────────────────────────────────────────────
 */
app.get('/api/webhooks/recent', async (_req, res) => {
  const items = await prisma.webhookEvent.findMany({
    orderBy: { id: 'desc' },
    take: 20,
  });
  res.json(items);
});

app.get('/api/webhooks/:eventId', async (req, res) => {
  const item = await prisma.webhookEvent.findUnique({
    where: { eventId: req.params.eventId },
  });
  if (!item) return res.status(404).json({ ok: false, error: 'Not found' });
  res.json(item);
});

/**
 * ──────────────────────────────────────────────────────────────────────────────
 * Start server
 * ──────────────────────────────────────────────────────────────────────────────
 */
const PORT = Number(process.env.PORT || 8083);
const HOST = process.env.HOST || '0.0.0.0';
app.listen(PORT, HOST, () => {
  console.log(`[API] listening on ${HOST}:${PORT}`);
});ø
xpnpm dev

